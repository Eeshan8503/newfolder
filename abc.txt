Y1 Write a shell  to perform addition, subtraction, multiplication and division of two numbers,

echo "Enter two numbers"
read a
read b

echo "Addition of two numbers is `expr $a + $b`"
echo "Subtraction of two numbers is `expr $a - $b`"
echo "Multiplication of two numbers is `expr $a \* $b`"
echo "Division of two numbers is `expr $a / $b`"






2 Write a program to read a file from the user and perform the following operation:
# -check if the file is available in the present directory.
# -check if the file exists
# -display whether a file has r/w/x permission.
# -check whether the given i/p is a file/directory.
# -check whether the given file is a symbolic link file.

echo "Enter the file name"
read file

if [ -f $file ]
then
    echo "File is available in the present directory"
else
    echo "File is not available in the present directory"
fi

if [ -e $file ]
then
    echo "File exists"
else
    echo "File does not exist"
fi

if [ -r $file ]
then
    echo "File has read permission"
else
    echo "File does not have read permission"
fi

if [ -w $file ]
then
    echo "File has write permission"
else
    echo "File does not have write permission"
fi

if [ -x $file ]
then
    echo "File has execute permission"
else
    echo "File does not have execute permission"
fi

if [ -d $file ]
then
    echo "Given input is a directory"
else
    echo "Given input is not a directory"
fi

if [ -f $file ]
then
    echo "Given input is a file"
else
    echo "Given input is not a file"
fi

3







3 Write a shell  to perform some unix commands(date,pwd,ls) using case statements.


echo "1. Date"
echo "2. Pwd"
echo "3. Ls"
echo "Enter your choice"
read choice

case $choice in
    1) date;;
    2) pwd;;
    3) ls;;
    *) echo "Invalid choice";;
esac




4 Write a shell  to factorial of a number
echo "Enter a number"
read n
fact=1
i=1
while [ $i -le $n ]
do
    fact=`expr $fact \* $i`
    i=`expr $i + 1`
done
echo "Factorial of $n is $fact"

./fs.sh




5 Write a shell  to searching for a pattern

echo "Enter the file name"
read file
echo "Enter the pattern to be searched"
read pattern
if [ -f $file ]
then
    echo "Pattern found" 
    grep $pattern $file
else
    echo "File does not exist"
fi




6 Write a shell  that accepts any number of file names as arguments and checks if every argument supplied is a file or a directory and display accordingly.


if [ $# -eq 0 ]
then
    echo "No arguments supplied"
else
    for i in $*
    do
        if [ -f $i ]
        then
            echo "$i is a file"
        elif [ -d $i ]
        then
            echo "$i is a directory"
        else
            echo "$i is neither a file nor a directory"
        fi
    done
fi






7 Write a shell  that displays a list of all files in the current directory with read, write and
# execute permission.

for file in *; do
    if [ -r $file ]; then
        echo "File $file has read permission"
    fi
    if [ -w $file ]; then
        echo "File $file has write permission"
    fi
    if [ -x $file ]; then
        echo "File $file has execute permission"
    fi
done






8 Write a shell  that will delete all line containing a specified word.

echo "Enter the word to be deleted"
read word
echo "Enter the file name"
read file
grep -v $word $file > temp
mv temp $file




9 write a shell  to display number from 1 to 10 using for loop and while loop.

echo "Using for loop"
for i in {1..10}; do
    echo $i
done

echo "Using while loop"
i=1
while [ $i -le 10 ]; do
    echo $i
    i=$((i+1))
done








10 write a shell  to find the sum of n natural numbers.

echo "Enter the number"
read n
sum=0
for i in $(seq 1 $n); do
    sum=$((sum+i))
done
echo "Sum of first $n natural numbers is $sum"













11 Write a shell  to combine 2 text files into a single file and display the word count.

echo "Enter the first file name"
read file1
echo "Enter the second file name"
read file2
cat $file1 $file2 > temp
mv temp $file1
wc $file1








12 Write a shell  that accepts a string from the terminal and echo a suitable message if it doesnot have atleast 5 characters .

echo "Enter the string"
read str
if [ ${#str} -lt 5 ]
then
echo "The string does not have atleast 5 characters"
else
echo "The string has atleast 5 characters"
fi








13 Write a shell  to translate all the characters to lowercase in a given text file.


echo "Enter the file name"
read file
tr '[A-Z]' '[a-z]' < $file > temp
mv temp $file

**************************************************************************************************************************************
1. Write a C program that takes one or more file/directory names as command line
input and reports the following information on the file:

a. File type
b. Number of links
c. Time of last access
d. Size of the file

#include<stdio.h>
#include<unistd.h>
#include<sys/types.h>
#include<sys/stat.h>
#include<fcntl.h>

int main(int argc, char* argv[])
{

struct stat s;

if(stat(argv[1],&s)<0){
perror("Error");
}
else{
printf("File type and permission is %d\n",s.st_mode);
printf("NO of links are: %d\n",s.st_nlink);
printf("Last access time is: %d\n",s.st_atime);
printf("Size of the file is: %d\n",s.st_size);
}
return 0;
}


2. Implement in C the following UNIX commands using system calls a) Cat b) mv

1. CAT

#include<sys/types.h>
#include<sys/stat.h>
#include<stdio.h>
#include<fcntl.h>
main( int argc,char *argv[3] )
{
int fd,i;
char buf[2];
fd=open(argv[1],O_RDONLY,0777);   
if(fd==-argc)
{
printf("file open error");
}
else
{
while((i=read(fd,buf,1))>0)
{
printf("%c",buf[0]);
}
close(fd);
}
}

2. MV

#include<sys/types.h>
#include<sys/stat.h>
#include<stdio.h>
#include<fcntl.h>
main( int argc,char *argv[] )
{
int i,fd1,fd2;
char *file1,*file2,buf[2];
file1=argv[1];
file2=argv[2];
printf("file1=%s file2=%s",file1,file2);
fd1=open(file1,O_RDONLY,0777);
fd2=creat(file2,0777);
while(i=read(fd1,buf,1)>0)
write(fd2,buf,1);
remove(file1);
close(fd1);
close(fd2);
}

3. Write a C program to list for every file in a directory, its inode number and file name.

#include<stdlib.h>
#include<stdio.h>
#include<string.h>
main(int argc, char *argv[])
{
char d[50];
if(argc==2)
{
bzero(d,sizeof(d));
strcat(d,"ls ");
strcat(d,"-i ");
strcat(d,argv[1]);
system(d);
}
else
printf("\nInvalid No. of inputs");
}

4. Write a C program to create a child process and allow the parent to display “parent” and the
child to display “child” on the screen

#include <stdio.h>
#include <sys/wait.h>  /* contains prototype for wait */
int main(void)
{
int pid;
int status;
printf("Hello World!\n");
pid = fork( );
if(pid == -1) /* check for error in fork */
{
perror("bad fork");
exit(1);
}
if (pid == 0)
printf("I am the child process.\n");
else
{
wait(&status); /* parent waits for child to finish */
printf("I am the parent process.\n");
}
}


5. Write a C program to create a Zombie process.

#include <stdlib.h>
#include <sys/types.h>
#include <unistd.h>

int main()
{
    // fork() creates child process identical to parent
    int pid = fork();

    // if pid is greater than 0 than it is parent process
    // if pid is 0 then it is child process
    // if pid is -ve , it means fork() failed to create child process

    // Parent process
    if (pid > 0)
        sleep(20);

    // Child process
    else {
        exit(0);
    }

    return 0;
}

6. Write a C program that illustrates how an orphan is created.

#include <stdio.h>
main()
{
int pid ;
printf("I'am the original process with PID %d and PPID %d.\n",getpid(),getppid());
pid=fork();
if(pid!=0 )
{
printf("I'am the parent with PID %d and PPID %d.\n",getpid(),getppid());
printf("My child's PID is %d\n",pid) ;
}
else
{
sleep(4);
printf("I'm the child with PID %d and PPID %d.\n",getpid(), getppid()) ;
}
printf ("PID %d terminates.\n", getpid()) ;
}

7. Implement in C the following UNIX commands using system calls a)cp b)ln

a)cp
#include <stdio.h>#include<fcntl.h>#include<unistd.h>#include<stdlib.h> 
int main(){ int n;int fd=open("havi.txt",O_RDONLY|O_CREAT);char d=(char)calloc(100,sizeof(char));intfd1=open("havi1.txt",O_WRONLY|O_CREAT);while(n=read(fd,d,10)>0)write(fd1,d,10);return 0;}
 
 b)ln
#include<stdio.h>#include<unistd.h>int main(int argc, char *argv[]){
if(link(argv[1],argv[2])==-1){printf("Link Error\n"); return 1;} printf("Files Linked\n");printf("Inode number of linked files\n");//display the inode linked files
char str[100];sprintf(str,"ls -i %s %s\n",argv[1],argv[2]);system(str);return 0;}


8. Write a program to avoid zombie process by using SIGCHLD signal, wait(), signal handler.

1. WAIT()

#include<stdio.h>  
#include<unistd.h>  
#include<sys/wait.h>  
#include<sys/types.h>  
int main()  
{  
int i;  
int pid = fork();  
if (pid==0)  
{  
for (i=0; i<20; i++)  
printf("I am Child\n");  
}  
else  
{  
wait(NULL);  
printf("I am Parent\n");  
while(1);  
}  
}  

2. SIGCHLD

#include<stdio.h>  
#include<unistd.h>  
#include<sys/wait.h>  
#include<sys/types.h>     
int main()  
{  
int i;  
int pid = fork();  
if (pid == 0)  
for (i=0; i<20; i++)  
printf("I am Child\n");  
else  
{  
signal(SIGCHLD,SIG_IGN);  
printf("I am Parent\n");  
while(1);  
}  
}  

3.

#include<stdio.h>  
#include<unistd.h>  
#include<sys/wait.h>  
#include<sys/types.h>     
void func(int signum)  
{  
wait(NULL);  
}
int main()  
{  
int i;  
int pid = fork();  
if (pid == 0)  
for (i=0; i<20; i++)  
printf("I am Child\n");  
else  
{  
signal(SIGCHLD, func);  
printf("I am Parent\n");  
while(1);  
}  
} 

9. Write a program to create a file with 10 bytes of data from the beginning and 10 bytes of data
from offset of 48 and display the contents of the file.

#include<stdio.h>
#include<string.h>
#include<unistd.h>
#include<sys/types.h>
#include<sys/stat.h>
#include<fcntl.h>

int main(int argc, char* argv[]) {
char msg1[] = "Data from beginning";
char msg2[] = "Data from middle";
int fd ;

fd = open(argv[1],O_RDWR| O_CREAT);
lseek(fd,0L,SEEK_SET);
write(fd,msg1,strlen(msg1));
lseek(fd,48L,SEEK_SET);
write(fd,msg2,strlen(msg2));

close(fd);
return 0;
}

10. Write a program to read few bytes of data from a file and write the content to another file.

#include<sys/types.h>
#include<fcntl.h>
#include<unistd.h>
#include<stdio.h>
#include<stdlib.h>
#include<sys/stat.h>
int main(int argc,char *argv[])
{
  int fd1,n;
  int fd;
  char buf[50];
  if((fd1=open(argv[1],O_RDONLY))<0)
  {
    printf("Error in opening the file \n");
  }
  n=read(fd1,buf,50);
  if(n<0)
  {
    printf("Error in reading \n");
  }
  fd=open("/Users/vm/unix/api/file2.txt",O_WRONLY|O_CREAT|O_EXCL,0644);
  printf("fd=%d",fd);
  write(fd,buf,n);
}




11. Write a program that creates the child using fork system call and one process finds the sum of
odd series and the other process finds the sum of even series.

#include <unistd.h>
#include <sys/types.h>
#include <stdio.h>

#include <stdlib.h>

int main()
{
    pid_t child_pid;
    int i, j, k, n;
    int sum;

    //printf("Enter the last number of series : ");
    scanf("%d", &n);
    printf("pid = %d\n", getpid());

    for(i = 0; i < 2; i++)
    {
        child_pid = fork();
        if (child_pid < 0)
        {
            printf("Failed to create child process . . .");
            return 1;
        }
        else if (child_pid == 0)
        {
            if (i == 0) //find the sum of odd series
            {
                sum = 0;
                for(j = 1; j <= n; j += 2)
                    sum += j;

                printf("Sum of Odd series : %d\n", sum);
                exit(0);
            }
            else if (i == 1) //find the sum of even series
            {
                sum = 0;
                for(j = 2; j <= n; j += 2)
                    sum += j;

                printf("Sum of Even series : %d\n", sum);
                exit(0);
            }

        }
        else
        {
            wait(&child_pid);
        }
    }
    return 0;
}


12. Write a program to handle SIGINT and SIGSEGV signal.

o SIGSEGV
#include<signal.h>#include<unistd.h>#include<stdlib.h>#include<stdio.h> 
int i=0;void handle_sigsegv(int sig){printf("\nNull pointer exception %d\n", sig);
exit(0);}int main(){signal(SIGSEGV,handle_sigsegv);char *c=NULL; 
printf("%c",c[9]);return 0 ;}
 
o SIGINT
#include<signal.h>#include<unistd.h>#include<stdlib.h>#include<stdio.h>
int i=0;void handle_sigint(int sig){printf("Caught signal %d\n", sig);i=1;exit(0);} 
int main(){signal(SIGINT, handle_sigint);while (!i){printf("Inside loop");sleep(1);
}return 0;}


13. Write a program to check whether SIGINT is a member of the mask and if it is not a member
add it to the mask.

#include<stdio.h>
#include<signal.h>
#include<stdlib.h>

int main()
{
sigset_t mask;
sigemptyset(&mask);

if(sigprocmask(0,0,&mask)<0)
{
perror("Error");
exit(1);
}

if(sigismember(&mask, SIGINT) == 1)
     printf("SIGINT IS MEMBER");
else
{
printf("SIGINT IS NOT MEMBER");
sigaddset(&mask, SIGINT);
if(sigprocmask(SIG_SETMASK, &mask, 0) < 0)
{
perror("error");
exit(1);}
else
{
if(sigismember(&mask, SIGINT) == 1)
printf("SIGINT IS NEW MEMBER");
else
printf("SIGINT IS NOT MEMBER");
}
}
}





